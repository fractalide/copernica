// terminology
// sid == secret identity; pid == public identity
// ilp == interlink packet (copernica terminology for a packet that is being transferred between links in a router)
// c = consumer, r == router, p == producer
// c2r = a consumer to router link
// v = which side of the link the data is. e.g.: cv2r = the data is on the consumer side of the c2r link

// run this code by installing verifpal then
// $ verifpal verify verifpal.vp

attacker[active]
principal DataProducer [
    knows private
        producer_protocol_sid,
        producer_link_sid,
        data, data_name
    producer_link_pid = G^producer_link_sid
]
principal Router [
    knows private router_link_sid
    router_link_pid = G^router_link_sid
]
principal DataConsumer [
    knows private consumer_link_sid, consumer_protocol_sid
    consumer_link_pid = G^consumer_link_sid
]
// communicated likely during a connection contract
Router -> DataProducer: [router_link_pid]
DataProducer -> Router: [producer_link_pid]
// communicated likely during a connection contract
Router -> DataConsumer: [router_link_pid]
DataConsumer -> Router: [consumer_link_pid]

phase[1]
principal DataProducer [
    producer_protocol_pid = G^producer_protocol_sid
]
// communicated likely on a business card
DataProducer -> DataConsumer: [producer_protocol_pid]
// communicated likely via a text message or a website
DataProducer -> DataConsumer: [data_name]
phase[2]
principal DataConsumer [
    bloom_filter_index_c = HASH(data_name)
    consumer_protocol_pid = G^consumer_protocol_sid
    generates data_nonce_cv2r, link_nonce_cv2r
    data_request_cv2r = CONCAT(
        producer_protocol_pid,
        consumer_protocol_pid,
        bloom_filter_index_c,
        data_nonce_cv2r
    )
    ilp_cyphertext_request_cv2r = AEAD_ENC(router_link_pid^consumer_link_sid,
        data_request_cv2r,
        link_nonce_cv2r
    )
    ilp_request_cv2r = CONCAT(ilp_cyphertext_request_cv2r, link_nonce_cv2r)
]
DataConsumer -> Router: ilp_request_cv2r
principal Router [
    ilp_cyphertext_request_c2vr, link_nonce_c2vr = SPLIT(ilp_request_cv2r)
    data_request_c2vr = AEAD_DEC(
        consumer_link_pid^router_link_sid,
        ilp_cyphertext_request_c2vr,
        link_nonce_c2vr
    )?
    generates link_nonce_rv2p
    ilp_cyphertext_request_rv2p = AEAD_ENC(producer_link_pid^router_link_sid,
        data_request_c2vr,
        link_nonce_rv2p
    )
    ilp_request_rv2p = CONCAT(ilp_cyphertext_request_rv2p, link_nonce_rv2p)
]
Router -> DataProducer: ilp_request_rv2p
principal DataProducer [
    ilp_cyphertext_request_r2vp, link_nonce_r2vp = SPLIT(ilp_request_rv2p)
    data_request_r2vp = AEAD_DEC(
        router_link_pid^producer_link_sid,
        ilp_cyphertext_request_r2vp,
        link_nonce_r2vp
    )?
    producer_protocol_pid_r2vp,
    consumer_protocol_pid_r2vp,
    bloom_filter_index_r2vp,
    data_nonce_r2vp = SPLIT(data_request_r2vp)
    _ = ASSERT(bloom_filter_index_r2vp, HASH(data_name))?
    generates link_nonce_pv2r
    data_pv2r = CONCAT(data, HASH(data_name))
    data_cyphertext_pv2r = AEAD_ENC(
        consumer_protocol_pid_r2vp^producer_protocol_sid,
        data_pv2r,
        data_nonce_r2vp
    )
    signature_pv2r = SIGN(producer_protocol_sid, data_pv2r)
    data_concat_response_pv2r = CONCAT(
        data_cyphertext_pv2r,
        signature_pv2r,
        data_nonce_r2vp
    )
    ilp_cyphertext_pv2r = AEAD_ENC(
        router_link_pid^producer_link_sid,
        data_concat_response_pv2r,
        link_nonce_pv2r
    )
    ilp_response_pv2r = CONCAT(ilp_cyphertext_pv2r, link_nonce_pv2r)
]
DataProducer -> Router: ilp_response_pv2r
principal Router [
    ilp_cyphertext_p2vr, link_nonce_p2vr = SPLIT(ilp_response_pv2r)?
    //_ = ASSERT(consumer_link_pid_p2vr, consumer_link_pid)
    // data_response_p2vr = AEAD_DEC(
    //     producer_link_pid^router_link_sid,
    //     ilp_cyphertext_p2vr,
    //     link_nonce_p2vr
    // )?
    // generates link_nonce_rv2c
    // ilp_cyphertext_response_rv2c = AEAD_ENC(consumer_link_pid^router_link_sid,
    //     data_response_p2vr,
    //     link_nonce_rv2p
    // )
    // ilp_request_rv2c = CONCAT(ilp_cyphertext_response_rv2c, link_nonce_rv2p)
    //ilp_rv2p = CONCAT(router_link_pid, ilp_cyphertext_response_rv2c, link_nonce_rv2p)
]

queries[
    confidentiality? producer_protocol_sid
    confidentiality? consumer_protocol_sid
    confidentiality? producer_link_sid
    confidentiality? router_link_sid
    confidentiality? consumer_link_sid
    confidentiality? data
    unlinkability? link_nonce_cv2r, data_nonce_cv2r

]
